// Code generated by counterfeiter. DO NOT EDIT.
package calculator

import (
	"sync"

	"github.com/apaliavy/checkout/app"
	"github.com/apaliavy/checkout/app/stock"
)

type CalculatorMock struct {
	CalculateItemsPriceStub        func(stock.SKU, int) (int, error)
	calculateItemsPriceMutex       sync.RWMutex
	calculateItemsPriceArgsForCall []struct {
		arg1 stock.SKU
		arg2 int
	}
	calculateItemsPriceReturns struct {
		result1 int
		result2 error
	}
	calculateItemsPriceReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CalculatorMock) CalculateItemsPrice(arg1 stock.SKU, arg2 int) (int, error) {
	fake.calculateItemsPriceMutex.Lock()
	ret, specificReturn := fake.calculateItemsPriceReturnsOnCall[len(fake.calculateItemsPriceArgsForCall)]
	fake.calculateItemsPriceArgsForCall = append(fake.calculateItemsPriceArgsForCall, struct {
		arg1 stock.SKU
		arg2 int
	}{arg1, arg2})
	stub := fake.CalculateItemsPriceStub
	fakeReturns := fake.calculateItemsPriceReturns
	fake.recordInvocation("CalculateItemsPrice", []interface{}{arg1, arg2})
	fake.calculateItemsPriceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CalculatorMock) CalculateItemsPriceCallCount() int {
	fake.calculateItemsPriceMutex.RLock()
	defer fake.calculateItemsPriceMutex.RUnlock()
	return len(fake.calculateItemsPriceArgsForCall)
}

func (fake *CalculatorMock) CalculateItemsPriceCalls(stub func(stock.SKU, int) (int, error)) {
	fake.calculateItemsPriceMutex.Lock()
	defer fake.calculateItemsPriceMutex.Unlock()
	fake.CalculateItemsPriceStub = stub
}

func (fake *CalculatorMock) CalculateItemsPriceArgsForCall(i int) (stock.SKU, int) {
	fake.calculateItemsPriceMutex.RLock()
	defer fake.calculateItemsPriceMutex.RUnlock()
	argsForCall := fake.calculateItemsPriceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CalculatorMock) CalculateItemsPriceReturns(result1 int, result2 error) {
	fake.calculateItemsPriceMutex.Lock()
	defer fake.calculateItemsPriceMutex.Unlock()
	fake.CalculateItemsPriceStub = nil
	fake.calculateItemsPriceReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *CalculatorMock) CalculateItemsPriceReturnsOnCall(i int, result1 int, result2 error) {
	fake.calculateItemsPriceMutex.Lock()
	defer fake.calculateItemsPriceMutex.Unlock()
	fake.CalculateItemsPriceStub = nil
	if fake.calculateItemsPriceReturnsOnCall == nil {
		fake.calculateItemsPriceReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.calculateItemsPriceReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *CalculatorMock) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.calculateItemsPriceMutex.RLock()
	defer fake.calculateItemsPriceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CalculatorMock) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ app.Calculator = new(CalculatorMock)
